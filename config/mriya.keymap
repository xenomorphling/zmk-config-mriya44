/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <

        //    &kp GRAVE   &kp Q     &kp W      &kp E      &kp R      &kp T            &kp Y      &kp U       &kp I         &kp O      &kp P       &kp LBKT
        //    &kp LCTRL   &kp A     &kp S      &kp D      &kp F      &kp G            &kp H      &kp J       &kp K         &kp L      &kp SEMI    &mt RCTRL SQT
        //    &kp LALT    &kp Z     &kp X      &kp C      &kp V      &kp B            &kp N      &kp M       &kp COMMA     &kp DOT    &kp FSLH    &mt RALT BSLH
        //           &kp LGUI    &lt 2 TAB    &mt LSHFT SPACE    &lt 1 RET            &lt 1 ESC    &mt RSHFT BSPC    &lt 2 DEL    &mt RGUI RIGHT_BRACKET

        &kp TAB     &kp Q       &kp W      &kp E      &kp R      &kp T            &kp Y      &kp U       &kp I         &kp O      &kp P       &kp LBKT
      &kp LGUI  &mt LGUI A     &kp S      &kp D      &kp F      &kp G            &kp H      &kp J       &kp K         &kp L      &kp SEMI    &mt RCTRL SQT
        &kp LSHFT   &kp Z       &kp X      &kp C      &kp V      &kp B            &kp N      &kp M       &kp COMMA     &kp DOT    &kp FSLH    &kp RSHFT
                        &kp LALT    &kp LCTRL    &lt 1 ESC    &kp SPACE      &kp RET  &mo 2     &mt RSHFT BSPC    &mt RGUI RIGHT_BRACKET

            >;
        };

        lower_layer {
            bindings = <

        // &kp UNDER    &kp F1  &kp F2     &kp F3    &kp F4     &kp F5                      &kp F6    &kp F7     &kp F8    &kp F9   &kp F10          &kp F11
        // &mt LCTRL PLUS  &kp EXCL  &kp AT   &kp HASH  &kp DLLR  &kp PRCNT                 &kp CARET  &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR  &mt RCTRL MINUS
        // &mt LALT EQUAL    &kp N1  &kp N2     &kp N3    &kp N4     &kp N5                 &kp N6    &kp N7     &kp N8    &kp N9    &kp N0           &trans
        //                           &trans  &lt 3 TAB    &trans     &trans                 &trans    &trans  &lt 3 DEL    &trans

        &kp GRAVE        &kp F1   &kp LG(LEFT)      &kp LG(RIGHT) &kp F4     &kp F5                       &kp F6    &kp F7     &kp F8    &kp LBKT   &kp RBKT          &kp F12
        &kp TILDE  &kp LC(LG(LEFT))  &kp LC(PG_UP) &kp LC(PG_DN)  &kp LC(LG(RIGHT)) &kp LA(F4)           &kp CARET &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR            &kp PIPE
        &mt LALT EQUAL   &kp N1   &kp N2      &kp LS(LC(C))     &kp LS(LC(V))     &kp DEL                &kp N6    &kp UNDER     &kp N8    &kp LBRC    &kp RBRC       &trans
                                    &trans   &lt 3 TAB     &trans     &trans                          &kp LG(SPACE)  &mo 3      &lt 3 DEL    &trans

            >;
        };

        raise_layer {
            bindings = <

        //     &kp KP_NUM     &kp KP_SLASH  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS              &kp C_VOL_UP  &kp HOME  &kp PSCRN  &kp PG_UP   &kp SLCK         &kp CAPS
        // &mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS                &kp C_MUTE  &kp LEFT     &kp UP  &kp RIGHT  &kp INS  &mt RCTRL K_APP
        //          &trans        &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3    &kp KP_DOT              &kp C_VOL_DN   &kp END   &kp DOWN  &kp PG_DN  &kp PAUSE_BREAK           &trans
        //                                      &trans     &trans     &trans     &lt 3 RET                 &lt 3 ESC    &trans     &trans     &trans

        &kp KP_NUM       &kp KP_SLASH  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS            &kp INS    &kp HOME     &kp PG_DN  &kp PG_UP  &kp END       &kp CAPS
        &trans            &kp EXCL      &kp AT     &kp HASH   &kp DLLR   &kp PRCNT              &kp BSPC  &kp LEFT     &kp DOWN   &kp UP     &kp RIGHT     &kp DEL
        &trans           &kp KP_N0     &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT              &kp PLUS   &kp MINUS    &kp EQUAL  &trans     &trans        &trans
                                        &trans     &trans     &mo 3        &trans               &lt 3 ESC    &trans     &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
        // &bootloader     &none         &none         &none         &none         &none              &none         &none         &none         &none         &none  &bootloader
        // &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4       &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0   &bt BT_CLR
        // &sys_reset         &none         &none         &none         &none         &none              &none         &none         &none         &none         &none   &sys_reset
        //                                  &none        &trans         &none        &trans             &trans         &none        &trans         &none

        &bootloader     &kp (LG(N1))  &kp (LG(N2))  &kp (LG(N3)) &kp (LG(N4)) &kp (LG(N5))         &kp (LG(N6)) &kp (LG(N7))    &kp (LG(N8))   &kp (LG(N9)) &kp (LG(N0))  &bootloader
        &trans         &kp N1        &kp N2      &kp N3       &kp N4       &kp N5                     &kp N6       &kp N7          &kp N8        &kp N9       &kp N0       &bt BT_CLR
        &sys_reset     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &sys_reset
                                         &none        &trans         &none        &trans             &trans         &none        &trans         &none
            >;
        };
    };
};
